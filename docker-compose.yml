services:
  postgres:
    image: postgres:alpine
    container_name: postgres_app
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: pedro
      POSTGRES_PASSWORD: pedrosenha
    networks:
      - webnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pedro"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  app:
    build: .
    container_name: app
    ports:
      - "8002:8002"
    environment:
      DOCKER_ENV: 'true'
    networks:
      - webnet
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_started
    command: ['sh','/app/commands.sh']
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter_app
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - webnet
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_app
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
    - webnet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_app
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
    - webnet

networks:
  webnet:

volumes:
  pgdata: